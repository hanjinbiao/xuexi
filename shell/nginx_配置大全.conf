#user nobody; #设置启动nginx的默认用户
error_log logs/error.log info; #定义错误日志的存放位置及日志级别
				#debug,info,notice,warning,error,crit,alert,emerg


# 优化1
worker_processes 1; #设置启动进程的数量，与内核的数量成正比
events {
	worker_connections 50000; #设置允许开启的最大文件数
	#需要去开启对应的linux的nofile;分别设置hard和soft
	#命令位ulimit -Hn  -Sn 
	#永久修改需要:echo "* hard nofile 10000\
	#					* soft nofile 10000" > /etc/security/limit.conf
}
#网页服务
http{

	#全局配置文件
	include mime.types; 
	default_type application/octet-stream;
	
	#日志文件地址
	#log_format main '$remote_addr - $remote_user [$local_time] "$request"'
	#				 '$status $body_bytes_sent "$http_referer"'
	#				 '"$http_user_agent" "http_x_forward_for"'
	#优化2 关于日志
	#mv /usr/local/nginx/logs/access.log{,.`date+%F`}
	#kill -USER1(或者10） /usr/local/nginx/logs/nginx.pid

	#access_log logs/access.log main

	sendfile on; 
	
	#开启服务器的响应头部信息产生独立的数据包发送
	#tcp_nopush on; 
	
	#保持连接的持续时常
	keepalive_timeout 65;

	#优化3 防止地址栏过长
	client_header_buffer_size 1k;
	large_client_header_buffers 4 4k; #在生产过程中就够用了

	#优化4 不显示nginx的版本号
	server_tokens off;
	#如果使用php-fpm可以修改fastcgi.conf中的nginx/$version,去除$version即可

	#优化5 启用对页面的压缩（gzip压缩，一般对于多媒体类的大文件不进行压缩）
	gzip on; 			#开启gzip
	gzip_min_length 1000; #设置最低的缓存数
	gzip_comp_level 4;  #设置压缩的级别，支持1-9个级别(建议级别在4-6
						#级别越高，服务器在压缩上浪费的时间越多)
	gzip_types test/plain test/css application/json  
	#可以参考mime.types文件，添加自己需要的类型

	#配置2 设置访问网站的口令
	auth_basic "你需要输入的提醒内容";
	auth_basic_user_file "/usr/local/nginx/conf/pass"; #此处需要使用httpd-tools
	#生成命令为：htpasswd -c /usr/local/nginx/conf/pass user （第二次不需要输入-c)

	#优化6 服务器内存缓存
	open_file_cache max=2000 inactive=20s; #设置最大打开的句柄，如果20s内没人访问，
											#从内存中删除
	open_file_cache_valid 60s; #设置缓存的最大存活时间
	open_file_cache_min_uses 5; #设置对于5人以上的访问，才加入缓存
	open_file_cache_errors off; #不让缓存报错


	#配置1 基础网站的配置
	server {
	
		listen 80; #设置段口号
		server_name www.test.com; #设置域名
		#可以直接设置ip
		#listen 1.1.1.1:80;
		#优化8 设置错误页面的自定义报错
		error_page 404 /404.html;
		error_page 500 504 502 503 /50x.html;
		location = /50x.html {
			root html;
		}

		#配置rewrite 地址重写技术
		#rewrite ^/ http://www.baidu.com/; #访问本服务的全部转到百度 
		#这边是可以支持正则及判断的
		#if ($http_user_agent ~* /firefox/) {
		#	rewrite ^(.*)$ firefox/$1;
		#}
		
		#nginx反响代理配置1-1
		#upstream web {
		#	ip_hash; #设置ip哈希，对于同ip的只能访问到后段的一个服务器上
		#	server 1.1.1.1:80 weight=2 max_fail=2 file_time=20; #设置权重为2，失败次数为2，失败重试为20s
		#	server 2.2.2.2:80 weight=2 max_fail=2 file_time=20;
		#
		#}

		#优化7 设置页面类型的数据监控，需要模块http_stub_status_module
		location /status {
			stub_status on;
			allow 1.1.1.1; #定义允许访问的ip，如果是地址段,类似于192.168.1.1/24
			deny all; #拒绝其他人访问
		}
	    

		#配置1-1 设置静态网页的存放位置及首页
		location / {
			#nginx反向代理配置1-2
			#proxy_pass http://web/;
			root html;
			index index.html index.htm;
		}
	
		#优化9 设置客户端的自定义缓存
		location ~* \.(jpg|png|mp4|mp3|gif)$ {
		expires 7d; #设置如上的格式,在客户端缓存时间为7天
		}	

		#配置1-2 设置动态网页php
		location ~* \.php$ {
			root html;  #设置动态网页的存放目录
			fastcgi_pass 127.0.0.1:9000;  #设置内部的php-fpm程序的地址及端口
			fastcgi_index index.php;
			include fastcgi.conf; #导入fastcgi.conf 配置文件
		
		}

	}
	#配置3 配置加密的https访问
	#需要安装模块 http_ssl_module
	server {
		
		listen 443;
		server_name www.example.com;
		
		ssl on;
		ssl_certificate cert.pem; #指定公钥  生成命令：openssl req -new -x509 -key cert.key > cert.pem
		ssl_certificate_key cert.key; #指定私钥 生成命令：openssl genrsa > cert.key
		ssl_ciphers HIGH:!aNull:!MD5; #密钥的要求
		ssl_session_timout 3m; #超时时间
		ssl_protocols SSLv2 SSLv3 SSlv1; #?
		ssl_prefer_server_ciphers on; #?

		location \ {
			root html;
			index index.html index.htm;
		}
	}

}
#配置TCP/UDP的代理服务
#需要加载模块http_stub_status_module
#stream{
#   #配置ssh的代理服务器
#	upstream myssh {
#		server 1.1.1.1:22;
#		server 2.2.2.2:22;
#	}
#
#	server {
#
#		listen 12345; #设置nginx的监听端口
#		proxy_pass myssh;
#		proxy_connect_timeout 1s;
#	}
#
#}
